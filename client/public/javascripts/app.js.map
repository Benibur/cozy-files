{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/collections/file.coffee","app/collections/folder.coffee","app/helpers/client.coffee","app/initialize.coffee","app/lib/app_helpers.coffee","app/lib/base_view.coffee","app/lib/view_collection.coffee","app/models/file.coffee","app/models/folder.coffee","app/router.coffee","app/views/fileslist.coffee","app/views/fileslist_item.coffee","app/views/folder.coffee","app/views/folderslist.coffee","app/views/folderslist_item.coffee","app/views/templates/fileslist.jade","app/views/templates/fileslist_item.jade","app/views/templates/folder.jade","app/views/templates/folderslist.jade","app/views/templates/folderslist_item.jade","app/views/templates/uploader.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1GA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApnDA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA","sourcesContent":["FolderCollection = require('./collections/folder')\nFileCollection = require('./collections/file')\n\n\nmodule.exports =\n\n    initialize: ->\n        # Used in inter-app communication\n        #SocketListener = require '../lib/socket_listener'\n\n        # Routing management\n        Router = require 'router'\n        @router = new Router()\n        @folders = new FolderCollection()\n        @files = new FileCollection()\n        Backbone.history.start()\n\n        # Makes this object immuable.\n        Object.freeze this if typeof Object.freeze is 'function'","File = require '../models/file'\n\nmodule.exports = class FileCollection extends Backbone.Collection\n\n    # Model that will be contained inside the collection.\n    model: File\n\n    # This is where ajax requests the backend.\n    url: 'files'\n\n    # patch Model.sync so it could trigger progress event\n    sync: (method, model, options)->\n        progress = (e)->\n            model.trigger('progress', e)\n\n        _.extend options,\n            xhr: ()->\n                xhr = $.ajaxSettings.xhr()\n                if xhr instanceof window.XMLHttpRequest\n                    xhr.addEventListener 'progress', progress, false\n                if xhr.upload\n                    xhr.upload.addEventListener 'progress', progress, false\n                xhr\n\n        Backbone.sync.apply @, arguments","Folder = require '../models/folder'\n\nmodule.exports = class FolderCollection extends Backbone.Collection\n\n    # Model that will be contained inside the collection.\n    model: Folder\n\n    # This is where ajax requests the backend.\n    url: 'folders'\n","# Make ajax request more easy to do.\n# Expected callbacks: success and error\nexports.request = (type, url, data, callbacks) ->\n    $.ajax\n        type: type\n        url: url\n        data: data\n        success: callbacks.success\n        error: callbacks.error\n\n# Sends a get request with data as body\n# Expected callbacks: success and error\nexports.get = (url, callbacks) ->\n    exports.request \"GET\", url, null, callbacks\n\n# Sends a post request with data as body\n# Expected callbacks: success and error\nexports.post = (url, data, callbacks) ->\n    exports.request \"POST\", url, data, callbacks\n\n# Sends a put request with data as body\n# Expected callbacks: success and error\nexports.put = (url, data, callbacks) ->\n    exports.request \"PUT\", url, data, callbacks\n\n# Sends a delete request with data as body\n# Expected callbacks: success and error\nexports.del = (url, callbacks) ->\n    exports.request \"DELETE\", url, null, callbacks","app = require 'application'\n\n$ ->\n    jQuery.event.props.push 'dataTransfer'\n    app.initialize()\n\n    # Initialize Spin JS the lib that displays loading indicators\n    $.fn.spin = (opts, color) ->\n        presets =\n            tiny:\n                lines: 8\n                length: 2\n                width: 2\n                radius: 3\n\n            small:\n                lines: 8\n                length: 1\n                width: 2\n                radius: 5\n\n            large:\n                lines: 10\n                length: 8\n                width: 4\n                radius: 8\n\n        if Spinner\n            @each ->\n                $this = $(this)\n                spinner = $this.data(\"spinner\")\n                if spinner?\n                    spinner.stop()\n                    $this.data \"spinner\", null\n                else if opts isnt false\n                    if typeof opts is \"string\"\n                        if opts of presets\n                            opts = presets[opts]\n                        else\n                            opts = {}\n                        opts.color = color if color\n                    spinner = new Spinner(\n                        $.extend(color: $this.css(\"color\"), opts))\n                    spinner.spin(this)\n                    $this.data \"spinner\", spinner\n\n        else\n            console.log \"Spinner class not available.\"\n            nullapp = require 'application'\n","(() ->\n    # IIFE to avoid collisions with other variables\n    (->\n        # Make it safe to do console.log() always.\n        console = window.console = window.console or {}\n        method = undefined\n        dummy = ->\n        methods = ('assert,count,debug,dir,dirxml,error,exception,\n                   group,groupCollapsed,groupEnd,info,log,markTimeline,\n                   profile,profileEnd,time,timeEnd,trace,warn').split ','\n\n        console[method] = console[method] or dummy while method = methods.pop()\n    )()\n)()\n","module.exports = class BaseView extends Backbone.View\n\n    template: ->\n\n    initialize: ->\n\n    getRenderData: ->\n        model: @model?.toJSON()\n\n    render: ->\n        @beforeRender()\n        @$el.html @template(@getRenderData())\n        @afterRender()\n        @\n\n    beforeRender: ->\n\n    afterRender: ->\n\n    destroy: ->\n        @undelegateEvents()\n        @$el.removeData().unbind()\n        @remove()\n        Backbone.View::remove.call @\n","BaseView = require 'lib/base_view'\n\n# View that display a collection of subitems\n# used to DRY views\n# Usage : new ViewCollection(collection:collection)\n# Automatically populate itself by creating a itemView for each item\n# in its collection\n\n# can use a template that will be displayed alongside the itemViews\n\n# itemView       : the Backbone.View to be used for items\n# itemViewOptions : the options that will be passed to itemViews\n# collectionEl : the DOM element's selector where the itemViews will\n#                be displayed. Automatically falls back to el if null\n\nmodule.exports = class ViewCollection extends BaseView\n\n    itemview: null\n\n    views: {}\n\n    template: -> ''\n\n    itemViewOptions: ->\n\n    collectionEl: null\n\n    # add 'empty' class to view when there is no subview\n    onChange: ->\n        @$el.toggleClass 'empty', _.size(@views) is 0\n\n    # can be overriden if we want to place the subviews somewhere else\n    appendView: (view) ->\n        @$collectionEl.append view.el\n\n    # bind listeners to the collection\n    initialize: ->\n        super\n        @views = {}\n        @listenTo @collection, \"reset\",   @onReset\n        @listenTo @collection, \"add\",     @addItem\n        @listenTo @collection, \"remove\",  @removeItem\n\n        if not @collectionEl?\n            collectionEl = el\n\n    # if we have views before a render call, we detach them\n    render: ->\n        view.$el.detach() for id, view of @views\n        super\n\n    # after render, we reattach the views\n    afterRender: ->\n        @$collectionEl = $(@collectionEl)\n        @appendView view.$el for id, view of @views\n        @onReset @collection\n        @onChange @views\n\n    # destroy all sub views before remove\n    remove: ->\n        @onReset []\n        super\n\n    # event listener for reset\n    onReset: (newcollection) ->\n        view.remove() for id, view of @views\n        newcollection.forEach @addItem\n\n    # event listeners for add\n    addItem: (model) =>\n        options = _.extend {}, {model: model}, @itemViewOptions(model)\n        view = new @itemview(options)\n        @views[model.cid] = view.render()\n        @appendView view\n        @onChange @views\n\n    # event listeners for remove\n    removeItem: (model) =>\n        @views[model.cid].remove()\n        delete @views[model.cid]\n\n        @onChange @views","client = require \"../helpers/client\"\n\n\nmodule.exports = class Bookmark extends Backbone.Model\n\n    # This field is required to know from where data should be loaded.\n    # We'll cover it better in the backend part.\n    rootUrl: 'files/'\n\n    # use same events as backbone to enable socket-listener\n    prepareCallbacks: (callbacks, presuccess, preerror) ->\n        {success, error} = callbacks or {}\n        presuccess ?= (data) => @set data.app\n        @trigger 'request', @, null, callbacks\n        callbacks.success = (data) =>\n            presuccess data if presuccess\n            @trigger 'sync', @, null, callbacks\n            success data if success\n        callbacks.error = (jqXHR) =>\n            preerror jqXHR if preerror\n            @trigger 'error', @, jqXHR, {}\n            error jqXHR if error\n\n\n    # Get application description\n    getAttachment: (file, callbacks) ->\n        @prepareCallbacks callbacks\n        client.post \"files/#{@id}/getAttachment/#{@name}\", callbacks\n","client = require \"../helpers/client\"\n\nmodule.exports = class Bookmark extends Backbone.Model\n\n    # This field is required to know from where data should be loaded.\n    # We'll cover it better in the backend part.\n    rootUrl: 'folders/' \n\n    validate: (attrs, options) ->\n\n        errors = []\n        if not attrs.name or attrs.name is \"\"\n            errors.push\n                field: 'name'\n                value: \"A name must be set.\"\n\n        if errors.length > 0\n            return errors\n        return \n\n    prepareCallbacks: (callbacks, presuccess, preerror) ->\n        {success, error} = callbacks or {}\n        presuccess ?= (data) => @set data.app\n        @trigger 'request', @, null, callbacks\n        callbacks.success = (data) =>\n            presuccess data if presuccess\n            @trigger 'sync', @, null, callbacks\n            success data if success\n        callbacks.error = (jqXHR) =>\n            preerror jqXHR if preerror\n            @trigger 'error', @, jqXHR, {}\n            error jqXHR if error\n\n\n    # Get application description\n    get: (callbacks) ->\n        @prepareCallbacks callbacks\n        client.get \"folders/#{@id}\", callbacks\n\n    # Get application description\n    findFiles: (callbacks) ->\n        @prepareCallbacks callbacks\n        client.get \"folders/#{@id}/files\", callbacks\n\n    # Get application description\n    findFolders: (callbacks) ->\n        @prepareCallbacks callbacks\n        client.get \"folders/#{@id}/folders\", callbacks","app = require 'application'\nFolderView = require 'views/folder'\nFolder = require 'models/folder'\n\n\n# We'll cover the router in another tutorial.\nmodule.exports = class Router extends Backbone.Router\n\n    routes:\n        '': 'main'        \n        'folders/:folderid' : 'folder'\n\n    main: ->\n        folder = new Folder id:\"root\", path:\"\", name:\"\"\n        @displayView new FolderView\n            model: folder\n\n    folder: (id) ->\n        initView = (folder) =>\n            @displayView new FolderView\n                model: folder\n\n        if app.folders.get(id)\n            folder = app.folders.get(id)\n            initView folder\n        else\n            folder = new Folder id:id\n            folder.get \n                success: (data) =>\n                    folder.set data\n                    initView folder\n\n    # display a page properly (remove previous page)\n    displayView: (view) =>\n        @mainView.remove() if @mainView\n        @mainView = view \n        el = @mainView.render().$el\n        $('body').append el","# This is where we import required modules\nBaseView = require '../lib/base_view'\nFileView  = require './fileslist_item'\n# This is where we import required modules\nBaseView = require '../lib/base_view'\nFileView = require './fileslist_item'\nFile = require '../models/file'\nViewCollection = require '../lib/view_collection'\n\nmodule.exports = class FilesListView extends ViewCollection\n\n    template: require('./templates/fileslist')\n    itemview: FileView\n    collectionEl: '#file-list'\n    @views = {}\n\n    initialize: (data) ->\n        super\n        @repository = data.repository\n\n    afterRender: ->\n        super()\n        \n    addFile: (attach)=>\n        fileAttributes = \n            name: attach.name\n            path: @repository\n        file = new File fileAttributes\n        file.file = attach\n        @collection.add file\n        @upload file\n\n    upload: (file) =>\n        formdata = new FormData()\n        formdata.append 'cid', file.cid\n        formdata.append 'name', file.get 'name'\n        formdata.append 'path', file.get 'path'\n        formdata.append 'file', file.file\n        Backbone.sync 'create', file,\n            contentType: false\n            data: formdata\n            success: (data) =>\n                file.set data","BaseView = require '../lib/base_view'\n\nmodule.exports = class FileListsItemView extends BaseView\n\n    # This time the html component does not exist in the dom.\n    # So, we don't refer to a DOM element, we just give\n    # class and tag names to let backbone build the component.\n    className: 'file'\n    tagName: 'div'\n\n    # The template render the bookmark with data given by the model\n    template: require './templates/fileslist_item'\n    # Register event\n\n    events:\n        'click button.delete': 'onDeleteClicked'\n\n    initialize: ->\n        @listenTo @model, 'change:id', => @render()\n\n    onDeleteClicked: ->\n        if confirm 'Are you sure ?'\n            @$('button.delete').html \"deleting...\"\n            @model.destroy\n                error: ->\n                    alert \"Server error occured, file was not deleted.\"\n                    @$('button.delete').html \"delete\"","BaseView = require '../lib/base_view'\nFilesList = require './fileslist'\nFileCollection = require '../collections/file'\nFolderCollection = require '../collections/folder'\nFoldersList = require './folderslist'\nFolder = require '../models/folder'\napp = require 'application'\n\n\nmodule.exports = class AppView extends BaseView\n\n    template: require('./templates/folder')\n    id: 'folder'   \n    className: 'container-fluid'\n\n\n    events: ->  \n        'click .add': 'onAddFolder'\n        'change #uploader': 'onAddFile'\n\n    afterRender: ->\n        super\n        @name = @$('#name')\n        @uploader = @$('#uploader')[0]\n        @repository = @model.attributes.path + '/' + @model.attributes.name\n        if @repository is '/'\n            @repository = \"\"\n\n        @model.findFiles \n            success: (files) =>\n                app.files.add files \n                collection = new FileCollection files\n                data = \n                    collection: collection \n                    repository: @repository\n                @filesList = new FilesList data\n                @$('#files').append @filesList.$el\n                @filesList.render()  \n            error: (error) =>\n                console.log error\n\n        @model.findFolders \n            success: (folders) =>\n                app.folders.add folders\n                collection = new FolderCollection folders\n                data = \n                    collection: collection \n                    repository: @repository\n                @foldersList = new FoldersList data\n                @$('#folders').append @foldersList.$el \n                @foldersList.render()\n            error: (error) =>\n                console.log error\n\n\n    onAddFolder: =>\n        folder =\n            name: @name.val()\n            path: @repository\n        folder = new Folder folder\n        err = folder.validate folder.attributes\n        if err\n            alert \"The folder name is empty\"\n        else\n            @foldersList.onAddFolder folder.attributes\n\n\n    onAddFile: =>\n        for attach in @uploader.files\n            @filesList.addFile attach","# This is where we import required modules\nBaseView = require '../lib/base_view'\nFileView  = require './fileslist_item'\n# This is where we import required modules\nBaseView = require '../lib/base_view'\nFolderView = require './folderslist_item'\nFolder = require '../models/folder'\nViewCollection = require '../lib/view_collection'\napp = require 'application'\n\nmodule.exports = class FilesListView extends ViewCollection\n\n    template: require('./templates/folderslist')\n    itemview: FolderView\n    collectionEl: '#folder-list'\n    @views = {}\n\n\n    initialize: (data) ->\n        super        \n        @repository = \"\"\n        if data.repository?\n            @repository = data.repository\n\n    afterRender: () ->\n    \tsuper\n    \t@name = @$('#name')\n\n    onAddFolder: (folder) ->\n        @collection.create folder,\n            success: (data) =>\n                app.folders.add data\n            error: (error) =>\n                @collection.reset folder\n                alert error.msg","BaseView = require '../lib/base_view'\n\nmodule.exports = class FolderListsItemView extends BaseView\n\n    # This time the html component does not exist in the dom.\n    # So, we don't refer to a DOM element, we just give\n    # class and tag names to let backbone build the component.\n    className: 'folder'\n    tagName: 'div'\n\n    # The template render the bookmark with data given by the model\n    template: require './templates/folderslist_item'\n\n    # Register event\n    events: ->\n        'click button.delete': 'onDeleteClicked'\n        'click .show-button': 'onShowClicked'\n\n    initialize: ->\n        super\n        @listenTo @model, 'change:id', => @render()\n        @listenTo @model, 'change:name', => @render()\n\n    onDeleteClicked: ->\n        if confirm 'Are you sure ?'\n            @model.destroy\n                error: ->\n                    alert \"Server error occured, folder was not deleted.\"\n\n","div#file-list","i.icon-file \na(href=\"files/#{model.id}/attach/#{model.name}\", target=\"_blank\")  #{model.name}  \nbutton.delete\n  i.icon-trash.icon-white \na(href=\"files/#{model.id}/download/#{model.name}\", download=\"#{model.name}\")  \n  i.icon-download.icon-white","#bar\n    input.flatbtn#uploader(type=\"file\") \n    input.input-block-level(type=\"text\", value=\"\", id=\"name\", placeholder=\"Folder name\")\n    button.add.flatbtn Create new folder\n#content\n    #h4 #{model.path + '/' + model.name}\n    #folders\n    #files","div#folder-list","i.icon-folder-close\na(href=\"#folders/#{model.id}\")  #{model.name}  \nbutton.delete\n  i.icon-trash.icon-white ","input#uploader(type=\"file\")"]}