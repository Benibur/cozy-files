// Generated by CoffeeScript 1.6.3
var File, Folder, findFolder;

Folder = require('../models/folder');

File = require('../models/file');

findFolder = function(id, callback) {
  var _this = this;
  return Folder.find(id, function(err, file) {
    if (err || !file) {
      return callback("File not found");
    } else {
      return callback(null, file);
    }
  });
};

module.exports.create = function(req, res) {
  return Folder.all(function(err, folders) {
    var conflict, folder, _i, _len;
    conflict = false;
    for (_i = 0, _len = folders.length; _i < _len; _i++) {
      folder = folders[_i];
      if (folder.slug === req.body.slug) {
        conflict = true;
        res.send({
          error: true,
          msg: "This folder already exists"
        }, 400);
      }
    }
    if (!conflict) {
      return Folder.create(req.body, function(err, newFolder) {
        if (err) {
          return res.send({
            error: true,
            msg: "Server error while creating file."
          }, 500);
        } else {
          return res.send(newFolder, 200);
        }
      });
    }
  });
};

module.exports.find = function(req, res) {
  return findFolder(req.params.id, function(err, folder) {
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return res.send(folder, 200);
    }
  });
};

module.exports.findFoldersRoot = function(req, res) {
  return Folder.byFolder(function(err, folders) {
    var folder, result, _i, _len;
    if (err) {
      return res.send({
        error: true,
        msg: "Server error occured"
      }, 500);
    } else {
      result = [];
      for (_i = 0, _len = folders.length; _i < _len; _i++) {
        folder = folders[_i];
        if (folder.path === '') {
          result.push(folder);
        }
      }
      return res.send(result, 200);
    }
  });
};

module.exports.findFilesRoot = function(req, res) {
  return File.byFolder(function(err, files) {
    var file, result, _i, _len;
    if (err) {
      return res.send({
        error: true,
        msg: "Server error occured"
      }, 500);
    } else {
      result = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.path === '') {
          result.push(file);
        }
      }
      return res.send(result, 200);
    }
  });
};

module.exports.findFiles = function(req, res) {
  return findFolder(req.params.id, function(err, folder) {
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return File.byFolder(function(err, files) {
        var file, result, _i, _len;
        if (err) {
          return res.send({
            error: true,
            msg: "Server error occured"
          }, 500);
        } else {
          result = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (file.path === folder.slug) {
              result.push(file);
            }
          }
          return res.send(result, 200);
        }
      });
    }
  });
};

module.exports.findFolders = function(req, res) {
  return findFolder(req.params.id, function(err, currentFolder) {
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return Folder.byFolder(function(err, folders) {
        var folder, result, _i, _len;
        if (err) {
          return res.send({
            error: true,
            msg: "Server error occured"
          }, 500);
        } else {
          result = [];
          for (_i = 0, _len = folders.length; _i < _len; _i++) {
            folder = folders[_i];
            if (folder.path === currentFolder.slug) {
              result.push(folder);
            }
          }
          return res.send(result, 200);
        }
      });
    }
  });
};

module.exports.destroy = function(req, res) {
  return findFolder(req.params.id, function(err, currentFolder) {
    var _this = this;
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return Folder.all(function(err, folders) {
        var folder, _i, _len;
        if (err) {
          return res.send({
            error: true,
            msg: "Server error occured"
          }, 500);
        } else {
          for (_i = 0, _len = folders.length; _i < _len; _i++) {
            folder = folders[_i];
            if (folder.path.indexOf(currentFolder.slug) === 0) {
              folder.destroy(function(err) {
                if (err) {
                  return console.log(err);
                }
              });
            }
          }
          return File.all(function(err, files) {
            var file, _j, _len1;
            if (err) {
              return res.send({
                error: true,
                msg: "Server error occured"
              }, 500);
            } else {
              for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                file = files[_j];
                if (file.path.indexOf(currentFolder.slug) === 0) {
                  file.destroy(function(err) {
                    if (err) {
                      return console.log(err);
                    }
                  });
                }
              }
              return currentFolder.destroy(function(err) {
                if (err) {
                  compound.logger.write(err);
                  return res.send({
                    error: 'Cannot destroy folder'
                  }, 500);
                } else {
                  return res.send({
                    success: 'Folder succesfuly deleted'
                  }, 200);
                }
              });
            }
          });
        }
      });
    }
  });
};
