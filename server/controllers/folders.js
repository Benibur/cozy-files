// Generated by CoffeeScript 1.6.3
var File, Folder, findFolder;

Folder = require('../models/folder');

File = require('../models/file');

findFolder = function(id, callback) {
  var _this = this;
  return Folder.find(id, function(err, file) {
    if (err || !file) {
      return callback("File not found");
    } else {
      return callback(null, file);
    }
  });
};

module.exports.create = function(req, res) {
  var newFolderFullPath,
    _this = this;
  newFolderFullPath = req.body.path + '/' + req.body.name;
  return Folder.all(function(err, folders) {
    var conflict, folder, fullPath, _i, _len;
    conflict = false;
    for (_i = 0, _len = folders.length; _i < _len; _i++) {
      folder = folders[_i];
      fullPath = folder.path + '/' + folder.name;
      if (fullPath === newFolderFullPath) {
        conflict = true;
        res.send({
          error: true,
          msg: "This folder already exists"
        }, 400);
      }
    }
    if (!conflict) {
      return Folder.create(req.body, function(err, newFolder) {
        if (err) {
          return res.send({
            error: true,
            msg: "Server error while creating file."
          }, 500);
        } else {
          return res.send(newFolder, 200);
        }
      });
    }
  });
};

module.exports.find = function(req, res) {
  return findFolder(req.params.id, function(err, folder) {
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return res.send(folder, 200);
    }
  });
};

module.exports.findFiles = function(req, res) {
  if (req.params.id === 'root') {
    return File.byFolder({
      key: ""
    }, function(err, files) {
      if (err) {
        return res.send({
          error: true,
          msg: "Server error occured"
        }, 500);
      } else {
        return res.send(files, 200);
      }
    });
  } else {
    return findFolder(req.params.id, function(err, folder) {
      if (err) {
        return res.send({
          error: true,
          msg: err
        }, 404);
      } else {
        return File.byFolder({
          key: folder.path + '/' + folder.name
        }, function(err, files) {
          if (err) {
            return res.send({
              error: true,
              msg: "Server error occured"
            }, 500);
          } else {
            return res.send(files, 200);
          }
        });
      }
    });
  }
};

module.exports.findFolders = function(req, res) {
  if (req.params.id === 'root') {
    return Folder.byFolder({
      key: ""
    }, function(err, folders) {
      if (err) {
        return res.send({
          error: true,
          msg: "Server error occured"
        }, 500);
      } else {
        return res.send(folders, 200);
      }
    });
  } else {
    return findFolder(req.params.id, function(err, folder) {
      if (err) {
        return res.send({
          error: true,
          msg: err
        }, 404);
      } else {
        return Folder.byFolder({
          key: folder.path + '/' + folder.name
        }, function(err, folders) {
          if (err) {
            return res.send({
              error: true,
              msg: "Server error occured"
            }, 500);
          } else {
            return res.send(folders, 200);
          }
        });
      }
    });
  }
};

module.exports.destroy = function(req, res) {
  return findFolder(req.params.id, function(err, currentFolder) {
    var _this = this;
    if (err) {
      return res.send({
        error: true,
        msg: err
      }, 404);
    } else {
      return Folder.all(function(err, folders) {
        var directory, folder, _i, _len;
        if (err) {
          return res.send({
            error: true,
            msg: "Server error occured"
          }, 500);
        } else {
          for (_i = 0, _len = folders.length; _i < _len; _i++) {
            folder = folders[_i];
            directory = currentFolder.path + '/' + currentFolder.name;
            if (folder.path.indexOf(directory) === 0) {
              folder.destroy(function(err) {
                if (err) {
                  return console.log(err);
                }
              });
            }
          }
          return File.all(function(err, files) {
            var file, _j, _len1;
            if (err) {
              return res.send({
                error: true,
                msg: "Server error occured"
              }, 500);
            } else {
              for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                file = files[_j];
                directory = currentFolder.path + '/' + currentFolder.name;
                if (file.path.indexOf(directory) === 0) {
                  file.removeBinary("file", function(err) {
                    if (err) {
                      console.log(err);
                    }
                    return file.destroy(function(err) {
                      if (err) {
                        return console.log(err);
                      }
                    });
                  });
                }
              }
              return currentFolder.destroy(function(err) {
                if (err) {
                  compound.logger.write(err);
                  return res.send({
                    error: 'Cannot destroy folder'
                  }, 500);
                } else {
                  return res.send({
                    success: 'Folder succesfuly deleted'
                  }, 200);
                }
              });
            }
          });
        }
      });
    }
  });
};
