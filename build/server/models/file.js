// Generated by CoffeeScript 1.7.1
var CozyInstance, File, Folder, americano, feed, fs, moment;

fs = require('fs');

americano = require('americano-cozy');

moment = require('moment');

feed = require('../lib/feed');

Folder = require('./folder');

CozyInstance = require('./cozy_instance');

module.exports = File = americano.getModel('File', {
  path: String,
  name: String,
  docType: String,
  creationDate: String,
  lastModification: String,
  "class": String,
  size: Number,
  binary: Object,
  modificationHistory: Object,
  clearance: function(x) {
    return x;
  },
  tags: function(x) {
    return x;
  }
});

File.all = function(params, callback) {
  return File.request("all", params, callback);
};

File.byFolder = function(params, callback) {
  return File.request("byFolder", params, callback);
};

File.byFullPath = function(params, callback) {
  return File.request("byFullPath", params, callback);
};

File.createNewFile = (function(_this) {
  return function(data, file, callback) {
    var attachBinary, index, keepAlive, unlink, upload;
    upload = true;
    attachBinary = function(newFile) {
      return newFile.attachBinary(file.path, {
        "name": "file"
      }, function(err, res, body) {
        upload = false;
        if (err) {
          return newFile.destroy(function(error) {
            return callback("Error attaching binary: " + err);
          });
        } else {
          return index(newFile);
        }
      });
    };
    index = function(newFile) {
      return newFile.index(["name"], function(err) {
        if (err) {
          console.log(err);
        }
        return unlink(newFile);
      });
    };
    unlink = function(newFile) {
      return fs.unlink(file.path, function(err) {
        if (err) {
          return callback(new Error("Error removing uploaded file: " + err));
        } else {
          return callback(null, newFile);
        }
      });
    };
    keepAlive = function() {
      if (upload) {
        feed.publish('usage.application', 'files');
        return setTimeout(function() {
          return keepAlive();
        }, 60 * 1000);
      }
    };
    return File.create(data, function(err, newFile) {
      if (err) {
        return callback(new Error("Server error while creating file; " + err));
      } else {
        attachBinary(newFile);
        return keepAlive();
      }
    });
  };
})(this);

File.prototype.getFullPath = function() {
  return this.path + '/' + this.name;
};

File.prototype.getPublicURL = function(cb) {
  return CozyInstance.getURL((function(_this) {
    return function(err, domain) {
      var url;
      if (err) {
        return cb(err);
      }
      url = "" + domain + "public/files/files/" + _this.id;
      return cb(null, url);
    };
  })(this));
};

File.prototype.getParents = function(callback) {
  return Folder.all((function(_this) {
    return function(err, folders) {
      var fullPath, parents;
      if (err) {
        return callback(err);
      }
      fullPath = _this.getFullPath();
      parents = folders.filter(function(tested) {
        return fullPath.indexOf(tested.getFullPath()) === 0;
      });
      parents.sort(function(a, b) {
        return a.getFullPath().length - b.getFullPath().length;
      });
      return callback(null, parents);
    };
  })(this));
};

File.prototype.updateParentModifDate = function(callback) {
  return Folder.byFullPath({
    key: this.path
  }, (function(_this) {
    return function(err, parents) {
      var parent;
      if (err) {
        return callback(err);
      } else if (parents.length > 0) {
        parent = parents[0];
        parent.lastModification = moment().toISOString();
        return parent.save(callback);
      } else {
        return callback();
      }
    };
  })(this));
};

if (process.env.NODE_ENV === 'test') {
  File.prototype.index = function(fields, callback) {
    return callback(null);
  };
  File.prototype.search = function(query, callback) {
    return callback(null, []);
  };
}
